Docker

Q) why we use Docker?

-Docker wants to make it really easy and really straightforward for you to install and run software on any given computer
-Docker makes it really easy to install and run software without worying abt setup and dependencies.

Q) What Docker is ?
 -Docker is a platform or ecosystem around creating and running containers.
 -Docker Ecosystem:- Docker Client, Docker Server, Docker Machine, Docker Images, Docker Hub and Docker compose
 
 Container- 
For example Berettas which is what the image I just downloaded was supposed to run.
This is a single file that gets stored on your hard drive and at some point in time it you can use this image to create something called a container.
A container is an instance of an image.And you can kind of think of it as being like a running program.

so image is a single file with all deps and config required to run a program.

But right now all we really need to understand is that a container is a program with its own isolated set of hardware resources.
so it kind of has its own little set or its own little space of memory has its own little space of networking technology and its own little space of hard drive space as well.


Q) Docker for windows?
It has two tools:
1) Docker client(Docker CLI) tools used to issue commands to Doocker Server.
2) Docker Server(Docker Daemon) tools that is responsible for creating images, running containers, etc.

Q)Command to run like docker run hello-world

-It run in Docker Cli then it call Docker Server 
-if we run command hellow-world that meant that we wanted to start up a new container using the image with the name of hello world the
hello world image has a tiny little program inside of it whose sole purpose sole job is to print out the message
-Now when we ran that command and it was issued over to the docker server a series of actions very quickly

occurred in the background.
The Dockers server saw that we were trying to start up a new container using an image called Hello world.The first thing that the Dockers server did was check to see if it already had a local copy like a copy on your personal machine of the hello world image or hello world file.So the docker server looked into something called the image cache.
Now because you and I just installed docker on our personal computers that image cache is currently empty.
We have no images that have already been downloaded before.So because the image cache was empty the Dockers server decided to reach out to a free service called docker hub the Dakar hub is a repository of free public images that you can freely download and run on your personal computer so server or reach out to dock or hub and said hey I'm looking for an image
called Hello world.Do you have one. Of course the docker How does have server downloaded this. Hello world file and stored it on your personal computer.
In this image cache where it can now be rerun at some point in the future very quickly without having to read download it from the dock or hub.
So essentially we downloaded it over here Lexa.
After that the darker server then said OK great I've got this image and now it's time to use it to create an instance of a container. And I remember what we just said about a container a moment ago an instant container is an instanc of an image.
Its sole purpose is to run one very specific program so the Dockers server then essentially took that single file load it up into memory created a container out of it and then ran a single program inside of it and that single program's purpose was to print out the message that you see right here.
That's what happens when you run this docker run command. It reaches out to Docker. hub.It grabs the image and then it creates a container out of that image.
Now one thing that you'll notice that's kind of interesting if we run the docker run hello world command a second time.You'll notice that we are not going to see the message of downloading or contain or image not found locally though we saw the first time.

Q)What Container- is?

Most operating systems have something called a kernel.
The kernel is a running software process that governs access between all the programs that are running on your computer and all the physical hardware that is connected to your computer as well.
So if you're at the top of this diagram we have different programs that your computer's running such as chrome or terminal Spotfy or nodejs.
If you've ever made use of Node as before and you've written a file to the hard drive it's technically not.
Nodejs that is speaking directly to the physical device instead.
No Nodejs says to your colonel hey I want to write a file to the hard drive.
The colonel then takes that information and eventually persists it to the hard disk.
So the kernel is always kind of this intermediate layer that governs access between these programs in your actual hard.
The other important thing to understand here is that these running programs interact with the kernel through things called system calls .These are essentially like function invocations.The kernel exposes different end points to say hey if you want to write a file to the hard drive call this endpoint or this function right here it takes some amount of information and then that information will be eventually written to the hard disk or memory or whatever else is required.

Now thinking about this entire system right here I want to pose a kind of hypothetical situation to you I want you to imagine for just a second that you and I have two programs running on our computer. Maybe one of them is chrome like chrome the web browser and the other is Nodejs the javascript server side runtime.I want you to imagine that we're in a crazy world where Chrome in order to work properly has to have
Python version 2 installed and nodejs has to have version 3 installed.
However on our hard disk we only have access to Python version 2 and for whatever crazy reason we are not allowed to have two identical installations of Python at the same time.
So as it stands right now Chrome would work properly because it has access to version 2 but nodejs would not because we do not have a version or a copy of Python version 3.
Again this is a completely make believe situation.
I just want you to kind of consider this for a second because this is kind of leading into what a container is.
So how can we solve this issue.
Well one way to do it would be used to make use of a operating system feature known as name spacing with name spacing. We can look at all of the different hardware resources connected to our computer and we can essentially segment out portions of those resources so we could create a segment of our hard disk specifically dedicated
to housing Python version 2. And we could make a second segment specifically dedicated to housing Python version 3.Then to make sure that Chrome has access to this segmentone over here and nodejs has access to this segment two here any time that either them issues a system call to read information off the hard drive the kernel will look at that incoming system call and try to figure out which process it is coming from.
So the kernel could say okay if Chrome is trying to read some information off the hard drive I'm going to direct that call over to this little segment one of the hard disk over here.The segment that has Python version 2 and Nodejs each time that makes the system call the read the hard drive the kernel can redirect that over to this segment for Python version 3.
And so by making use of this kind of name spacing we're segmenting feature.
We can have the ability to make sure that Crome and node us are able to work on the same machine. Now again in reality neither of these actually needed installation of Python.
This is just a quick example.So this entire process of kind of segmenting a hardware resource based on the process that is asking for it is called name spacing we are allowed to isolate resources per a process or a group of processes and we essentially saying that any time a particular process asks for a resource we're going to direct it to this one little specific area of the given piece of hardware.
Now name spacing is not only used for hardware it can be also used for software elements as well.So for example we can namespace a process to restrict the area of a hard drive that is available or the network devices that are available or the ability to talk to other processes or the ability to see other processes. These are all things that we can use named spacing for to essentially limit the resources we're kind of redirect requests for resource from a particular process very closely related to this idea of some
name spacing is another feature called control groups a control group can be used to limit the amount of resources that a particular process can use.
So name spacing is for saying hey this area of the harddrive is for this process a "Control group" can be used to limit the amount of memory that a process can use the amount of CPu the amount of hard drive input input or the input output and the amount of network bandwidth as well. So these two features put together it can be used to really kind of isolate a single process and limit the amount of resources it can talk to and the amount of bandwidth essentially that it can make use of.
Now as you might imagine this entire kind of little section right here this entire vertical of a running process plus this little segment of resource that it can talk to is what we refer to as a container. And so when people say oh yeah I have a or container.
You really should not think of these as being like a physical construct that exists inside of your computer. Instead a container is really a process or a set of processes that have a grouping of resources specifically assigned to it.
And so this is a diagram that we're going to be looking at quite a bit Any time that we think about a container.
We've got some running process that sends a system call to a kernel.
The kernel is going to look at that incoming system call and direct it to a very specific portion of the hard drive the RAM CPU or whatever else it might need.
And of a portion of each of these resources is made available to that singular process.
Now the last question you might have here is OK well I get what a container is but with that in mind what is the real relation between one of those containers are that kind of single singular process and grouping of resources to an image.
How is that single file i.e image eventually create this container.
That's a good question.
One more quick diagram any time that we talk about an image we're really talking about a file system snapshot.
So this is essentially kind of like a copy paste of a very specific set of directories or files. And so we might have an image that contains just chrome and Python an image will also contain a specific startup command.
So here's what happens behind the scenes when we take an image and turn it into a container.
First off the kernel is going to isolate a little section of the harddrive and make it available to just this container.
And so we can kind of imagine that after that little subset is created the file snapshot inside the image is taken and placed into that little segment of the harddrive.
And so now inside of this very specific grouping of resources we've got a little section of the harddrive that has just chrome and Python installed and essentially nothing else.
The startup command is then executed which we can kind of imagine this case is like startup chrome just run Chrome for me. And so Chrome is invoked.
We create a new instance of that process and that created process is then isolated to this set of resources inside the container.So that's pretty much it.
That is the relationship between a container and an image and it's how an image is eventually taken and turn into a running container.


Q)HOw Docker running in our system ?

In the last section we had a long discussion about the relationship between a container and an image. We had said that a container is a running process along with a subset of physical resources on your computer there are allocated to that process specifically.
We also spoke a little bit about the relationship between an image and a running container member.
An image is really kind of a snapshot of the file system along with a very specific start up command as well.
Now one thing that I want to mention very quickly here in the last section we spoke a little bit about the separation or the code the isolation of these resources through a technique called name spacing.
And we also said that we could limit the amount of resources used by these control group things as well.
Now this feature of the name spacing and control groups is not included by default with all operating systems.
Even though in the last section I had kind of specifically said like oh yeah you're operating system has a kernel to these features of name spacing and control groups are specific to the Linux operating system.
So name speccing control groups belong to Linux not to Windows not to Mac OS.
So that might make you kind of question or wonder how are you running Doker right now.
You know we are running a Dr. Klein and we are running docker containers on a Mac OS or Windows operating system.
How is that happening?
If these are Linux specific features Well here's what's happening behind the scenes.
When you installed docker for Windows or docket for Mac just a moment ago in the last couple of sections you installed a Linux virtual machine.
So so long as stalker up here is running you technically have a Linux virtual machine running on yourcomputer inside of this virtual machine is where all these containers are going to be created.
So inside the virtual machine we have a linux kernel and that Linux kernel is going to be hosting running processes inside of containers and it's that Linux kernel that's going to be in charge of limiting access or kind of constraining access or isolating access to different hardware resources on your computer.
You can actually kind of see this Linux virtual machine in practice by opening up your terminal right now. And if you run that docker version command again and look at your server you'll notice that there's actually an OS and tree on here.
And you'll notice that it probably doesn't have your operating system listed line for example here says very specifically Linux as the operating system.
So that is kind of specifying that I'm running a Linux virtual machine and that's what's being used to host all these different containers that you and I are going to be working with.So just a little bit of interesting trivia.
