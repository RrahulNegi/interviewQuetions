Algorithum Run Time Analysis

-Its a study of algo running time by identifing its behaviour as a input size of algo increases.

-Its tells how much time the given algo will take to run.

- it help us to measure the efficiency of algo.

a)Notation for Algo Run Time:-

we can measure the run time analysis of algo:
-Best case , - worst case ,-average case

Worst case - for example lets it takes 1 min to exe
Best case - 15 sec to exec
Average case - like 30 to 35 sec

1-Omega():-

-it gives lower bound of given algo
-it says the run time of given algo is less then the given time
-what ever no of input we gave to algo the processing time of it will always be lesst then the given time. Example if we trying to solve 1000 no so we can say the time may not goes less then 10 sec i.e it may go to 11 or 14 sec but it cant be like 9 sec of 8 sec. we needs such anotation becoz in some times we need to know for a given algo how much time minimum is required so in those cases we can assign the sources accordingly.

2- Big O :
- it gives upper bound of algo
- it tells in any given algo it wont take more then the given times.
-If we have to short 1000 no so it will take  max take 100sec  so in cant goes to 101 sec oi.e it can be more then 100 sec. it can goes to 98 or 70 sec but cant goes above that sec

3- Theta notation:- 
- it decide the uppper bound and lower bound of a given algo is same or not.
- we say how much time on a average it takes. like it takes 10 sec to sort 1000 numbers so in some senario it will take 9 sec or it can take 11 sec for other input. so their is a varience in performance so theta will say the average time of performances is 10 sec for any given input


b) Example of Notation :

size of array of unshorted array is 1 million so we have to find 10 in array:
 
 arr=2,3,5,1,7,8,....,90,10
so hrere we keap going every cell in array to find the no 10 and if we get we return the cell so it took n times to find the no in array. where n is no of numbers in array

so in terms of notation for time taken by to search a no

-omega(1):- it is becoz the running time will not less then the given time so in this case we took n time if we find the no 3 so it will take 3 unit time so it wion t take less then 1 unit of time

-BigO(n)- since it wont we more then a given time so here it take n times
so it will never exceed n unit of time

-Theta(n/2):-  since it gives average of total time
so some times it take 4 unit of time to find 3 and 100 unit to find the 10 no in array
so average is n/2


For interview we should know abt Big o notation


in some of cases time complexity

1)Adding element a front of linkedlist= O(1) i.e constant
2)Finding element in sorted array = O(logn) i.e Logarthmic
3)Finnding element in unsorted array :- O(n) Linear
4)In merge sort : o(n logn) Linear Logarthmic
5) O(n2)i.e o(n square) shortest path in two graph


c) How to calculate the time complexity of algo
-Iterative algo

arr= 2,4,19,.. 43,1,111 find the biggest no

findBiggestNo(int arr[]){
 biggestNo=arr[0];--------------------------O(1)  //contsatnt time to asign the value
 loop i=1 to length(arr)-1-----------O(n)   //it traverces all cells in array so it will O(n) 
	if arr[i]>biggestNo--------------O(1)  //comparing a no is constant time 
		biggestNo=arr[i]-------------O(1)
 return biggestNo -------------------------O(1)
 
 time complexity= O(1)+O(n)+O(1)=> O(n)


- Recurcive algo :-

arr = 2,1,5,6..89..2897... find biggest 
n=length of array

findBiggestNo(arr,n)-----T(n) since it will take T(n) time
 static highest =Integer.min; ---o(1)
 if n equals -1 --------O(1)
   return highest-----O(1)
 else
  if(arr[n] >highest ----O(1)
	update highest ------O(1)
 return FindBiggestNo(arr,n-1);------T(n-1)
 
 T(n)==>O(1)+O(1)+T(n-1)--------------
 
 Base condition===> T(-1)=O(1) since if n=-1 so only it will return higgest no  line no 88
 
 Eq2-- T(n-2)=O(1) +T(n-2)-1 just replace n to n-1
  so adding all equation we will get O(n)
  
  
  Example 2 -
  
  Arr = 19,20,30,40,80,90,110 search no 110 in sorted array
  
  we do binary search we start from middle since it is sorted arr so if no we find  is more then then we move right else left,\.
  
  BinarySearch(int findNo, int arr[], start , end)----- T(n)
	if(start== end)-------------------------------------O(1)
		if(arr[start]== findNo)-------------------------O(1)
			return start--------------------------------O(1)
		else return error than no dosnt existin array------O(1)
	mid= findMid(arr[], start, end)-----------------------O(1)
	if(mid>findNumber)------------------------------------O(1)
		BinarySearch(findNo,arr,start,mid)----------------T(n/2)
	else if(mid<findNumber)----------------------------o(1)
		BinarySearch(findNo,arr,mid,end)-----------------T(n/2)
	else if mid==findNo----------------------------------O(1)
		return mid---------------------------------------O(1)
		
		Time COmplexity====> T(n)=O(1)+T(n/2)
		
		In case of recurcion we have to assume the time complexity for method n then we have to go from their so we assume tis algo take T(n)
		
		
		Eq1== T(n)=T(n/2)+1
		Base Eq= T(1)=1
		Eq3 ==T(n/2)=(t(n/4)+1
		E4===T(n/4)=(T(n/8)+1
	-----------------------+----------	
Total ==T(n/8)+3===>For genric way T(n/2 to power k)+k

n/2powerk=1 =>n=2 power k so k=log keap

so total result is log n



