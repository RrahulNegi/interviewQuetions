Python list and range

You can create a list of numbers automatically using a range. For example:

list(range(1, 10))

That will output:

[1, 2, 3, 4, 5, 6, 7, 8, 9]

As you can see we just needed to specify the list boundaries inside range(). So, we specified 1and 10. Note that 10 is not included in the list. The generated list always runs up to one number before the upper number. In our example it goes up to 9 since the upper number is 10.

You can also specify a step as a third argument:

list(range(1, 10, 2))

That will output:

[1, 3, 5, 7, 9]

So, the count happens every two items starting from 1 and ending at 9.


2) Dir :

Dir in python gives what all things we can do with the type ex:

Terminal

py -3

>>> dir(list) press enter

o/p :

['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', 
'__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 
'pop', 'remove', 'reverse', 'sort']

similarly for string 
dir(string)

['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', ]

now if we wana learn wnat this isUpper do so for this we use "help command"

>>> hepl(str.isupper)

o/p :

isupper(self, /)
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and       
    there is at least one cased character in the string.


-) if we wana knw all buidin function and typpe we use cmd

dir(__builtins__)

o/p : complete use of type and built in functions


2) Distionary : item in distionary made of keys and values 

student_grades = {"rahul":10, "singh":8}

student_grades = {"rahul":10,"singh":9}

print(student_grades.values()) ## it will print values i.e 10, 9
 
print(student_grades.keys())  ## it will print keys i.e rahul and singh

sum1 = sum(student_grades.values())
lengthVal = len(student_grades)

avg_grde= sum1/lengthVal

print(avg_grde)

3) touples :

monday_temp (1,2,4)

diffrence from list :-

- it use brackets ()
- it is immutable where as list is mutable i.e in list we can add or delete values


- paython shell :- 

clear shell : ctrl +l