1)Semaphore :-

-We'll start with java.util.concurrent.Semaphore. We can use semaphores to limit the number of concurrent threads accessing a specific resource.

In the following example, we will implement a simple login queue to limit the number of users in the system:

class LoginQueueUsingSemaphore {
 
    private Semaphore semaphore;
 
    public LoginQueueUsingSemaphore(int slotLimit) {
        semaphore = new Semaphore(slotLimit);
    }
 
    boolean tryLogin() {
        return semaphore.tryAcquire();
    }
 
    void logout() {
        semaphore.release();
    }
 
    int availableSlots() {
        return semaphore.availablePermits();
    }
 
Notice how we used the following methods:

tryAcquire() – return true if a permit is available immediately and acquire it otherwise return false, but acquire() acquires a permit and blocking until one is available
release() – release a permit
availablePermits() – return number of current permits available


2)CountDownLatch :-

- CountDowaLatch is a high-level synchronization utility which is used to prevent a particular thread to start processing until all threads are ready.

- This is achieved by a countdown. The thread, which needs to wait for starts with a counter, each thread them make the count down by 1 when they become ready, once the last thread call countDown() method, then the latch is broken and the thread waiting with counter starts running.

How to use CountDownLatch in Java?
Theory is easy to read but you cannot understand it until you see it live in action, this is even more true with concurrency and multi-threading. So let's see how to use CountDownLatch in Java with a simple demo. In this example, we have a main thread which is required to wait until all worker thread finished their task. In order to achieve this, I have created a CountDownLatch with number of count equal to 4, which is the total number of worker threads. I then passed this CountDownLatch to each worker thread, whenever they complete their task, they call countDown() method, once last worker thread calls the countDown() method then the latch is broken and main thread which has been waiting on latch start running again and finished its execution.

- In order to truly understand this problem, you first need to run by by commenting latch.await() call in main method, without this call main thread will not for any worker thread to finish their execution and it will terminate as soon as possible, may be even before any worker thread get started. If you run again by un-commenting latch.await() then you will always see that main thread has finished last. Why? because await() is a blocking call and it blocks until count reaches zero.


- Also, you cannot reuse the latch once count=0, calling await() method on latch will have no effect i.e. thread will not block, but they not throw any exception as well, which is little bit of counter intuitive if you are expecting an IllegalThreadStateException.


public class CountDownLatchDemo {

    public static void main(String args[]) throws InterruptedException {
        
        CountDownLatch latch = new CountDownLatch(4);
        Worker first = new Worker(1000, latch, "WORKER-1");
        Worker second = new Worker(2000, latch, "WORKER-2");
        Worker third = new Worker(3000, latch, "WORKER-3");
        Worker fourth = new Worker(4000, latch, "WORKER-4");
        
        first.start();
        second.start();
        third.start();
        fourth.start();
        
        // Main thread will wait until all thread finished
        latch.await();
        
        System.out.println(Thread.currentThread().getName() + " has finished");

    }

}

class Worker extends Thread {
    private int delay;
    private CountDownLatch latch;

    public Worker(int delay, CountDownLatch latch, String name) {
        super(name);
        this.delay = delay;
        this.latch = latch;
    }

    @Override
    public void run() {
        try {
            Thread.sleep(delay);
            latch.countDown();
            System.out.println(Thread.currentThread().getName() + " has finished");
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}

Output
WORKER-1 has finished
WORKER-2 has finished
WORKER-3 has finished
WORKER-4 has finished
main has finished



Important points about CountDownLatch in Java
Let's revisit some important things about CountDownLatch in Java. This will help you to retain the knowledge you have just learned :

1) When you create an object of CountDownLatch you pass an int to its constructor (the count), this is actually number of invited parties (threads) for an event.

2) The thread, which is dependent on other threads to start processing, waits on latch until every other thread has called count down. All threads, which are waiting on await() proceed together once count down reaches to zero.

3) countDown() method decrements the count and await() method blocks until count == 0

4) Once count reaches to zero, countdown latch cannot be used again, calling await() method on that latch will not stop any thread, but it will neither throw any exception.

5) One of the popular use of CountDownLatch is in testing concurrent code, by using this latch you can guarantee that multiple threads are firing request simultaneously or executing code at almost same time.

6) There is a similar concurrency utility called CyclicBarrier, which can also use to simulate this scenario but difference between CountDownLatch and CyclicBarrier is that you can reuse the cyclic barrier once the barrier is broken but you cannot reuse the CountDownLatch one count reaches to zero.
----------------------------------------------------------------------------------------

3)CyclicBarrier :-


CyclicBarrier is another concurrency utility introduced in Java 5 which is used when a number of threads (also known as parties) want to wait for each other at a common point, also known as the barrier before starting processing again.

- Its similar to CountDownLatch but instead of calling countDown() each thread calls await() and when last thread calls await() which signals that it has reached the barrier, all thread started processing again, also known as a barrier is broken.

-CyclicBarrier Example in Java
You just cannot understand concurrency without an example, seeing is believing here. It's difficult to comprehend words like worker thread, parties, waiting for each other at a point, until you see it live in action. In this program, we have four worker threads and one main thread, which is running your main method. We have an object of CyclicBarrier, which is initialized with parties = 4, the argument we passed in CyclicBarrier constructor is nothing but number of party, which is actually number of threads to stop at barrier. The barrier will not be broken until all parties are arrived. A party (thread) is said to be arrived with it call barrier.await() method.

In our example setup, we have given each worker thread a different name, starting from PARTY-1 to PARTY-4 just to have a meaningful output. We have passed the same instance of the cyclic barrier to each thread. If you look at their Runnable implementation, you will find that each party sleep for some seconds and then call await() method on the barrier.

The sleep is introduced so that every thread calls barrier method after some time.  Sleep time is also in increasing order, which means PARTY-4 should be the last one to call await. So as per our theory, every thread (party) should wait after calling await() until the last thread (PARTY-4) calls the await() method, after that every thread should wake up and start processing.

*/ public class HelloHP { 
public static void main(String args[]) throws InterruptedException, BrokenBarrierException
 { 
 CyclicBarrier barrier = new CyclicBarrier(4);
 Party first = new Party(1000, barrier, "PARTY-1"); 
 Party second = new Party(2000, barrier, "PARTY-2");
 Party third = new Party(3000, barrier, "PARTY-3");
 Party fourth = new Party(4000, barrier, "PARTY-4"); 
 
 first.start();
 second.start(); 
 third.start(); 
 fourth.start(); 
 System.out.println(Thread.currentThread().getName() + " has finished");
 } 
 } 
 
 class Party extends Thread { 
 private int duration; 
 private CyclicBarrier barrier; \
 public Party(int duration, CyclicBarrier barrier, String name)
 { 
 super(name); 
 this.duration = duration; 
 this.barrier = barrier; 
 } 
 @Override public void run() 
 { 
 try 
 { 
 Thread.sleep(duration);
 System.out.println(Thread.currentThread().getName() + " is calling await()"); barrier.await();
 System.out.println(Thread.currentThread().getName() + " has started running again");
 } 
 catch (InterruptedException | BrokenBarrierException e)
 { e.printStackTrace(); 
 } 
 } 
 }
 
 Output 
 main has finished PARTY-1 is calling await() 
 PARTY-2 is calling await() 
 PARTY-3 is calling await() 
 PARTY-4 is calling await() 
 PARTY-4 has started running again PARTY-1 has started running again
 PARTY-2 has started running again PARTY-3 has started running again

