python jupyter


- jupyter is used for data analysis

- install jupyter :

pip3 install jupyter

- open jupyter 

jupyter noyebook


it will open jupyter on localhost:8888

import os
os.listdir()

o/p ==>
['.ipynb_checkpoints',
 'supermarkets-commas.txt',
 'supermarkets-semi-colons.txt',
 'supermarkets.csv',
 'supermarkets.json',
 'supermarkets.xlsx',
 'Untitled.ipynb']
 
 
 - 
 import pandas

df1=pandas.read_csv("supermarkets.csv")
df1

o/p ==>

it will print all csv file in tabular form


-
df2 = pandas.read_json("suprmarkets.json")
df2

-

Note on Loading Excel Files
In the next lecture you're also going to learn how to load Excel (.xlsx) files in Python with pandas. Pandas may require the xlrd library as a dependency. If you get an error such as ModuleNotFoundError: No module named 'xlrd', you can fix the error by installing xlrd:

pip install xlrd 
or

pip3 install xlrd 


Here we have to give extra parameter sheet_name=0

df3 = pandas.read_excel("supermarkets.xlsx",sheet_name=0)
df3


- for txt comma seperated files

df4 = pandas.read_csv("supermarkets.txt")
df4

- if in the txt file words are seprated by ";"

df5 = pandas.read_csv("supermarkets-semi-colons.txt",sep=";")
df5


=========

Header row

if a txt of json file dosnt have header

- df5 = pandas.read_csv("supermarket_without_header")

df5

so it will print a random value in header

So for this we use command

df5 = pandas.read_csv("supermarket_without_header", header=None)

so it will print header like 0 ,1....n

1) Set names in headerv::

df5.columns = ["ID", "Address", "City", "Sip", "Country" ,"Name","Employee"]


2) Set index:

By default we have an index like 0,1,2,3 i.e first column befor ID

df3.set_index("ID", inplace=True)
df3

so it will update the data by replacing the default id with ID column

similarly if we use
df3.set_index("Address" , inplace=True)

so it will update data and make Address as an index and remove the address column from data

- so if we want to make an colum as n defult index and column is also not removed

df3.set_index("Name", inpnace=True, drop=False)
df3

3) Indexing and slicing

- manuplating rows and clumns from data frame

we can aceess the data from frame 

-df3.loc["1":"2","City":"Country"]

it will print data with ID=1 and 2 and columns will be from city to Address

- acces data based on indexes

df7.iloc[1:3,1:3]

 it will fetch data from rows 1 and 2 , cloumn 1  and 2
 
df3.iloc[1:,1:3]

it will fetch all data from row 1 to last and column 1 to 2

4) Deleting columns and rows

df7.drop["City",1 ]

it will drop all city column

df7.drop("332 Hill St",0)

it will drop thats particular row

df3.drop(3)
it will drop row having id =3



4) Addding new colum and row 


df7["Continent"]=df7.shape[0]*["North America"]

so this cmd will add a new header with name "Continent" and values with "Nort America"

df7.shape

will print (5,7) ==> 5 rows and 7 columns

df7.shape[0] ===> 5 that is 5 rows

df7.shape[0]*["North America"]
=>["North America",
"North America",
"North America",
"North America",
"North America"]


5) Modifying columns

df7["Continent"]=df7["Country"]+ "," + "North America"

- convert row to coulmn

df7_t=df7.T

it will convert row to column


===========================================================================

Geocoding :

uSed to find geo address 

pip3 install geopy


from geopy.geocoders import ArcGIS
nom=ArcGIS()
nom.geocode("India gate")

o/p ==> Location(India Gate, New Delhi, Delhi, (28.613120000000038, 77.22955000000007, 0.0))


df3["Coordinates"]=df3["Address"].apply(nom.geocode)
df3

==> it will add column coordinate with all coordinate of that address 
