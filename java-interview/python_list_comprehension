List comprihances 

lets take example of temprature

temp = [234,345,456]

here we wont put like [23.4, 34.5,45.6] becoz the '.' will take an extra space so we avoid those so to convert it into decimals we use :

temp = [234,345,456]

new_temp = []

for tm in temp:
    new_temp.append(tm/10)


print(new_temp)

o/p ==>> [23.4, 34.5, 45.6]

using list comprehnsion we can use  :

new_temp = [tm/10 for tm in temp]


- using if condition in list comprihances :

temp = [234,345,456,-9999, 888]

new_temp =[tm/10 for tm in temp if tm != -9999]

print(new_temp)

p/p ==> [23.4, 34.5, 45.6, 88.8]

- using if else

nw_list = [i if i >0 else 0 for i in list_data]

o/p ===> [2, 3, 0, 0, 8]


examples

list_data_no = [2, 'no data', 4 ,5 ,6, 'no data', 8]

nw_list_data_no =[i if not isinstance(i, str) else 0 for i in list_data_no]

print(nw_list_data_no)

o/p ===> [2, 0, 4, 5, 6, 0, 8]


=============================================================================================================================================================================================================================

default and non-default parameters and keyword and non keyword arguments


def area(a, b):
	retur a*b
	
print(area(2,3)) ===> its called as default afrg


print(area(a=2, b=4)) ====> its called as keyword arguments


default arguments :

def area(a, b=7):
	return a *b  ===> here b is a default arguments

print(area(2)) ===> 14

print(area(2,3) ===>6


==================================================

function with arbitory number of non key word argumets :

like len(str) ==> can take only one arguments
isinstance(1, int) ==> take two arguments
so if we want to put n no of arguments so for this we can use : like mean(*args) ==> it shows we can take n no of arguments

def mean(*args):
    return args

print(mean(1,2,3,4, 'a', 'c', 7))


it will return tuples of data :
(1, 2, 3, 4, 'a', 'c', 7)

example of mean :


def mean(*args):
    return sum(args)/len(args)

#print(mean(1,2,3,4, 'a', 'c', 7)) 

print(mean(1,2,3,4,4,5))



- for key word arg we use like


def foo(**kwargs):
    return (kwargs)



## print(foo(1,2,3)) ==> thorw error as we not using keyword arge

print(foo(a=1,b=3,c=3))  ## ==> it will return dict




Summary: More on Functions
In this section you learned that:

Functions can have more than one parameter:

def volume(a, b, c):
    return a * b * c
Functions can have default parameters (e.g. coefficient):

def converter(feet, coefficient = 3.2808):
    meters = feet / coefficient
    return meters
 
print(converter(10))
Output: 3.0480370641306997

Arguments can be passed as non-keyword (positional) arguments (e.g. a) or keyword arguments (e.g. b=2 and c=10):

def volume(a, b, c):
    return a * b * c
 
print(volume(1, b=2, c=10))
An *args parameter allows the  function to be called with an arbitrary number of non-keyword arguments:

def find_max(*args):
    return max(args)
print(find_max(3, 99, 1001, 2, 8))
Output: 1001

An **kwargs parameter allows the function to be called with an arbitrary number of keyword arguments:

def find_winner(**kwargs):
    return max(kwargs, key = kwargs.get)
 
print(find_winner(Andy = 17, Marry = 19, Sim = 45, Kae = 34))
Output: Sim

Here's a summary of function elements:


