SOA vs microservices?
SOA is just a kind of utility anyone can access it.
Microservices:-Its a whole Application

public class MviCatApplication{
@Bean
public RestTemplate getRestTemplate(){
	return new RestTemplate();
}

public static void main(String[] args){
SpringApplication.run(...)
}
}

-Then we will just Autowired RestTemplate in any class and then it will load at once 
@Bean is producer it tells I have this object people will need so execute this method and return .

-RestTemplate will be deprecated at a point and in place of it we can use WebClient.
 WebClient - Asynchronus So in this we have api calls and we dont wait around and we will do other works. So we dont tell what to do but give lambda and instruct what needs to happen when its done
 RestTemplate-Syncronus so in this we say RestTemplate to give me the object and then it will wait around till it gives u the object
 
 webClient-
  in pom we change web dependency to  webflux 
  webClient.Builder builder = WebClient.builder
  Movie movie= webClientBuilder.build().get().uri("http://localhost:8080/api").retrive().bodyToMono(Movie.class).block();
  
  bodyToMono :- its a reactive way to say we are getting the object sometime in future its asyncronus and its like a promise. 
  
  Q-)So why hardcoding url is  wrong?
  - Changes require code update
  - load balancing 
  - dynamic url in clou d
  - Multiple envoirments
  
  SO to make microservices talk or comunicate we use services discovery ie trhey will discover the traget
Q) how we do service discovery?
  -) we have Discover Server and we should register our service their.
  -) then the client will look the discovery server i.e what service it needs and it provide the address of service api
  -)client  send msg to service 2
  
  Spring cloud uses client side discovery-
  
  Spring cloud us eEureka.
  -)Eureka is project that make open source by Netflix OSS 
  -) Netlix created this lib for microservices like Eureka, Ribbon, Hysterix, Zuul and make them open source 
  -) we use spring cli=oud and eureka for register the service and discover them.
   -) Eureka Server is Discovery Server and all the services is like Eureka clients
   
   
   Create Eureka Server
   - pom eureka discoverys 
   
Q) Microservices distributed Transaction

1) Two Phase commit :-
In this all transaction occured in two phase :-
- prepare phase - commit phase
Their is a  coordinator which can be a different service or one of them
 this co-ordinator keep and eye on all the transaction held.
 So let their be two services customer wallet and order services. Now coordinator will first prepare the both services for transaction if it return ok so transaction will lock the rows of both the database. So after that it will ask customer wallet and order to start commit and both have to send response as ok commit.
 Failure phase :- 
 1) If customer wallet dosnt have enough balance then in prepare phase it will through not ok prepare i,e error as coordinator see error the whole process get invalidated
 2)If their is some inconsistent value at commit state then also it will throw error
  \3)Iolation will happend at prepare phase it will lock the database 
  
  4) cordinator  should have a timeout as if certain services is down so it wont response back so after some time coordinator should abord the whole process
  
  Advantages/Disadvantage
  Advantage=consistence
  it is slow 
  
 2) 3 phase commit:-
 it has a third phase which help if coordinator fails 
 pre-commit step :- is one extra steps is theor it help in case of coordinator failure or participant failure
 - their can be many participant i.e diffrent nodes
 and coordinator can be any one and since it is precommit so any participant can take over failed coordinator and can start in middle 
 by understatnding state of precommit.
 I phase -> can commit in this cordinator knows how many participant is their so it send the request and it get response as yes.
 
 II phase :- this is where coordinantor tell to prepare the data and lock the data and get ackowledgment
 
 III phase:- is do commit
 
 How 3 phase commit help when coordinantor fails ?
  => the new coordinantor need to talk to participant if atleaste one participant said i have the do commit msg recived that means new co-ordinator guess that the old co-ordinator is ready to give do commit  to other participant
  
  => if non of the participant said it hasnt recive precommit taht means for sure the new coordinantor guess non of participant has done do commit and hence all of the data will remain consistence.
  
  2 phase and 3 phase have drawback is that it is synchronous
  
  3) SAGA 
 -> it works asynchronous
 ->The series of microservices talks using queue as messaging queue
 ->
 when user plasces order it goes to order MS in this it check the inventory and its add mesage like order created into queue and the customer wallets ms is free then it picks the messaage from queue the order ms put some msg and respective amount from wallet is get deducted so if all goes well So whole cycle is successeded
 
 If some thing get failed like customer wallet dodnt have any money so it generate an another queue and set msg like rollback the order and this msg will readed by order ms and it will get rollbacked
 
 It is faster then 2 phase or 3 phase
 
 isolation =>since all transaction is local and all is flowwing in sequence order so these ms will not get multiple req at given point of time
=======
  
  
 Q) Imp ---> 12 factor App 
 https://12factor.net/
 
 
 Q) Ways to implement ACID transaction?
 1) 2pc :
 Two-Phase Commit Protocol
This mechanism is designed initially for distributed systems. As Microservices architecture inherently distributed systems in nature, we can use the Two-phase commit protocol (or 2PC) as one of the approaches. Primary drivers in a distributed transaction management are the message broker/transaction coordinator.
The distributed transaction contains two steps:
Prepare phase
Commit or Rollback phase
Prepare Phase:
All the participants of a transaction in this phase will be prepared for the commit and inform the transaction coordinator/message broker that they are ready for completing the transaction
Commit or Rollback phase:
In this phase, transaction coordinator will issue one of the commands they are a commit or a rollback to all the participants.
The main issue with the 2PC approach is that it is a bit slow compared to the time for the operation on a single Microservice because it has to coordinate the transaction between services even if all the microservices are on the same network, still operation will be slow. So we need to be careful while implementing this for high demand services.

DrawBack:- its very slow.

2) SAGA principle:
https://dzone.com/articles/saga-pattern-how-to-implement-business-transaction-1
