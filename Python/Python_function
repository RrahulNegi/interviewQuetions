paython functions ==?

def meanGrade(grade_list):
    return sum(grade_list) / len(grade_list)

print(meanGrade([10,20,30,40]))

save file using function_ex.py

to run => py function_ex.py

o/p ==> 25.0


1) if we do not return any value like


def meanGrade(grade_list):
     sum(grade_list) / len(grade_list)

print(meanGrade([10,20,30,40])) 

so o/p = None


2) 
def meanGrade(grade_list):
     sum(grade_list) / len(grade_list)

print(meanGrade([10,20,30,40]))

mymean = meanGrade([10,20,30,40])+10

print(mymean) ===> it will throw type error :-TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'

----------------------------------------------------------------------------------------------------------------------------------------


python conditions =========>>>>>>>>


def mean(value):
    if type(value) == dict:
        print("Value is dist")
        the_mean = sum(value.values())/len(value)
    else:
        print("value is list")
        the_mean =sum(value)/len(value)
    return the_mean


## print(mean([10,20,30,40]))

grades= {"aa":10,"bb":20, "cc":30, "dd":40}

print(mean(grades))


1) In place of     if type(value) == dict:
 we can also use isinstance(value, dict)




You can also check if two conditions are met at the same time using an and operator:

x = 1
y = 1
 
if x == 1 and y==1:
    print("Yes")
else:
    print("No")
That will return Yes since x == 1 and y ==1 are both True.

You can also check if one of two conditions are met using an or operator:

x = 1
y = 1
 
if x == 1 or y==2:
    print("Yes")
else:
    print("No")
That will return Yes since at least one of the conditions is True. In this case x == 1 is True.


Elseif :


if x>1:
	print("yes")
elif x==1:
	print("MayBe")
else:
	prin("No")
	
	
	
	
========================================================================================================================================

User input :

prompting to user to enter values

so use : input("Enter temperature :")

user_input = input("Enter temperature")

Example :

def foo(temp):
    if temp >25:
        print("Warm")
    else:
        print("Cold")

user_input = input("Enter Temperature:")
foo(user_input)

o/p ==>

 py userInput_ex.py
Enter Temperature:3
Traceback (most recent call last):
  File "userInput_ex.py", line 8, in <module>
    foo(user_input)
  File "userInput_ex.py", line 2, in foo
    if temp >25:
TypeError: '>' not supported between instances of 'str' and 'int'


So the real problem is like when wver we use user input python converts bits to string wether we enter 7 so we have to convert string to float 

user_input = float(input("Enter Temperature:"))


-)String formatting :=
 
 
 user_input = input("Enter your name :")
message = "Hello %s!" %user_input

message = f"Hello {user_input}" 

print(message)

we can use both %s for paython 2 and 3 and {} for paython >3

-) String Formatting with multiple variable



user_input = input("Enter your name :")
surname = input("Enter your surname :")
message = "Hello %s!" %user_input

message = f"Hello {user_input}" 
print(message)

new_msg = "Welcome %s %s" %(user_input, surname)

print(new_msg)




user_input = input("Enter your name :")
surname = input("Enter your surname :")
when ="today"
message = "Hello %s!" %user_input

message = f"Hello {user_input}" 
print(message)

new_msg = "Welcome %s %s" %(user_input, surname)

new_msg = f"Welcome {user_input} {surname} How r u {when}"


print(new_msg)



============================================================================================================================================================

For loop :


- round() it will convert 2.1 =>2 , 6.8 =>7
example :-

tempList = [4.2,5.5,8.9,12.5]

for temp in tempList:
    print(temp)

for letter in "Rahul":
    print(letter)


Note that using loops you can call any function multiple times, even your own functions. Let's suppose we defined this function:

def celsius_to_kelvin(cels):
    return cels + 273.15
That is a function that gets a number as input, adds 273.15 to it and returns the result. A for loop allows us to execute that function over a list of numbers:

monday_temperatures = [9.1, 8.8, -270.15]
 
for temperature in monday_temperatures:
    print(celsius_to_kelvin(temperature))
The output of that would be:

282.25
281.95
3.0

So, in the first iteration celsius_to_kelvin(9.1) was executed, in the second celsius_to_kelvin(8.8) and in the third celsius_to_kelvin(-270.15).

That's just something to keep in mind.


2) For loop in dictionary :


grade_dist ={"Rahul":"A", "Singh": "B", "Negi":"A", "Priye":"A+"}

for grade in grade_dist.items():
    print(grade)

for stdName in grade_dist.keys():
    print(stdName)

for grd in grade_dist.values():
    print(grd)


3) while loop :

#a = 10
# while a >0:
#     x=a+1
#     print(x)

a = 0
while a < 5:
    a=a+1
    print(a)
	
	

While loop break and continue :

username =  ''

while username!='pypy':
    username = input("Enter Name :")


==>

while True:
    username = input("Enter username: ")
    if username == 'pypy':
        break
    else:
        continue
		
		
		
Summry of loop


In this section you learned that:

For loops are useful for executing a command over a large number of items.

You can create a for loop like so:

for letter in 'abc':
    print(letter.upper())
Output:

A
B
C

The name after for (e.g. letter) is just a variable name



You can loop over dictionary keys:

phone_numbers = {"John Smith":"+37682929928","Marry Simpons":"+423998200919"}
for value in phone_numbers.keys():
    print(value)
Output:

John Smith
Marry Simpsons

You can loop over dictionary values:

phone_numbers = {"John Smith":"+37682929928","Marry Simpons":"+423998200919"}
for value in phone_numbers.values():
    print(value)
Output:

+37682929928
+423998200919

You can loop over dictionary items:

phone_numbers = {"John Smith":"+37682929928","Marry Simpons":"+423998200919"}
for key, value in phone_numbers.items():
    print(key, value)
Output: 

('John Smith', '+37682929928')

('Marry Simpons', '+423998200919')



While loops will run as long as a condition is true:

while datetime.datetime.now() < datetime.datetime(2090, 8, 20, 19, 30, 20):
    print("It's not yet 19:30:20 of 2090.8.20")
The loop above will print out the string inside print() over and over again until the 20th of August, 2090.


