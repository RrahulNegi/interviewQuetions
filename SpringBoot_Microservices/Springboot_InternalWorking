How SpringBoot Internal work?


-It using all programatic configuration which is always done by springboot developer
-ANd they provide as a jar i.e we r using preconfigured jar providedd by spring developer
So where this jar is provided?

So these jar came from  :-


1) Starter POM ::-


 While creating spring boot app we adding spring-boot-starter-jpa, spring-boot-starter-test etc
 So when is adding it its doing nothing just downloading all jar for certain type of project like standalone or web app. once we have a jar in the build path its internally it contains file like spring.factories  inside META-INF
 -META-INF/spring.factories  :- Inside this develpoer metion what component should be  enable or disable. So inside it their is some properties based on jar present, in built path it will enable or desable some component, like it will enable the jpa repository etc on based on some condition.
 So they use :-
 @Conditional since spring 4 we got this annotation earlier we use profilers .
 
 Lets see it in project :
 
 1)Pom.xml
 
 we have :-
 spring-boot-starter-web, spring-boot-starter-data-jpa, spring-boot-starter-test
 
 Now if we will go to build path we have all jar related to above like spring-boot-starter-web in if we click on jar we have package and then we can go to META-INF folder we will observe thier is spring.factories we have many component enable or disable on condition basis. Lets go to JpaRepositoriesAutoConfiguration.java file here we can see we have annotation @ConditionalOnBean(DataSource.class) so if dataSource bean is available then only we can enable the jpa repository thats why we r adding data source related properties in our application.properties.
 like :
 OnBeanCondition :-check if bean is their in springfactory
 OClassCondition : Check if class is on ClassPath
 onJavaCondition Check if version of Java
 onPropertyCondition : Check if property exist
 
 So if all condition is satisfied then only springboot will boost the particular component.
 
 Q) How SpringBoot kick of our application ?
 
 So we have this MainApplication class which annotated with @SpringBootApplication so
 @SpringBootApplication= @Configuration + @EnableAutoConfiguration + @ComponentScan
 
 @Configuration : behave class as bean
 @EnableAutoConfiguration : it will enable/disable component based on condition
 @ComponentScan : hepls us to scan our package or bean for register in IOC container
 
 if we go inside @SpringBootApplication we have all anotation as mention above
 - it has some properties like :
1-exclude :- it will exclude particular class that will be not applied and if we dont want include bean in IOC condition we use exclude
2 - ScanBasePackage and scanBasePackageClass :- if we want our package or bean will be scan by ioc container we can mention base package class or we can directly specify the root package
 
 Q)Whats is the need of Main Method?
 
 -Main method is not requiers for typical deployment scenario of building a war or plcaing it in webapps  folder.
 -However if we want to be able to launch the application from within IDE like eclipse
 (Run AS java application) while developing or build an executable jar or war that can run on standalone with Springboot embedded tomcat by just java -jar myapp.war command
 As execution start from main method then only our executable jar can be deployed in tomcat
 So thats why we we need a main method().

 
 Q) Flow of SpringApplication.run(..) ?
 
 From run method the main application context is kicked off which in turn searches for the classes annotated with @configuration, initializes all the declared beans in those configuiration classes and stores those bean in JVM, specifically in a space inside JVM which is known as IOC container. After creation of all the beans, auotmatically configures the dispatcher servlet and registers the default handler mappings, message converts and all other basic things reuired to build our application.
 
 Q) run(...) internal flow ?
 -Create Application context
 - check application type like wether it is web or standalone or react based application
 - register anoonated class bean with context
 -Create an instance of TomcatEmbeddedServletContainer and adds the context
 
 In code go to SpringApplication.class  then go to run(..)
 it class createApplicationContext() inside this it will check the application type  if it is web application so webapplication type application context is registerd i.e on basic of application type it will intentiate context and it will invoke constructor of that context and register all the annotated class i.e all the class which is anootated with @Bean, @COmponent or @Configuraion.
 Now we have application context and all the bean is register to the context now we need a  server to up our application so we use embeded tomcat. SO Embeded webappliction context create an instance of tomcat embededed serverlet container and add to context so whenever jar and war is generated it will aoto deplyed to web app contianer.
 
 
 