Subject :-

we can trigger an even using Subject So any component can listen to this trigger.

Example :- On ecommerse site If we update the cart detail in cart component and their is another component  i.e navigation component I have to show no of item in cart if we add the cart item it should increase in navigation component.

For this we have create an message service
1)

import {Subject} from 'rxjs';
@Injectable({
  providedIn: 'root'
})
export class MessangerService {
  subject=new Subject();
  constructor() { }
  getMsg(){
    return this.subject.asObservable();
  }
  sendMsg(product){
    this.subject.next(product); // triggering event
  }

  //. this willtrigger event if any cart item is added 
sendStringMessage(msg){
 this.subject.next(msg);
}  

getStringMessage(){
   return this.subject.asObservable();
}

}

2)
if we remove cart item in cart component then we will call sendStringMessage of messangerService this will trigger an event
@Component({
  selector: 'app-cart-item',
  templateUrl: './cart-item.component.html',
  styleUrls: ['./cart-item.component.css']
})
export class CartItemComponent implements OnInit {
@Input() cartItem:any;
  constructor(private cartService: CartService,private messangerService:MessangerService
  ) { }
  ngOnInit() {
  }
  removeFromCart(cartItem:CartItem){
    this.cartService.removeProductFromCart(this.cartItem.id).subscribe(e=>{
      this.messangerService.sendMsg(this.cartItem)
      this.messangerService.sendStringMessage("Item removed");
    });
}
}


Similarly in productItem component if we add an item to cart it will again trigger an event 


@Component({
  selector: 'app-product-item',
  templateUrl: './product-item.component.html',
  styleUrls: ['./product-item.component.css']
})
export class ProductItemComponent implements OnInit {
  @Input() productItem:Product;
  
  @Input() addedToWishlist: boolean;
  title = 'appBootstrap';
  
  closeResult: string;

  constructor(private messangerService:MessangerService,
    private cartService : CartService,
    private wishlistService: WishlistService,
  ) { }
    ngOnInit() {
     this.loadAllWishlist();
  }
  handleAddToCart(){
    this.cartService.addProductToCart(this.productItem).subscribe(()=>{
      this.messangerService.sendMsg(this.productItem);
      this.messangerService.sendStringMessage("Item added");  .. Trigger event that item is added    
      
    })
  }
  
  
4) In navigation componet will listen to this trigger component and call loadCartSize function


@Component({
  selector: 'app-nav',
  templateUrl: './nav.component.html',
  styleUrls: ['./nav.component.css']
})
export class NavComponent implements OnInit {
  cartSize;
  constructor(private messangerService: MessangerService,private cartService: CartService) { 
  }

  ngOnInit() {
    this.loadCartSize();
    this.handleSubscription();
  }

   loadCartSize(){
    this.cartService.getCartSize().subscribe(size=>{
      this.cartSize=size;
    })
   } 

   handleSubscription(){
    this.messangerService.getStringMessage().subscribe((msg)=>{
    if(msg){
      this.loadCartSize();
    }
  });
  }
}




